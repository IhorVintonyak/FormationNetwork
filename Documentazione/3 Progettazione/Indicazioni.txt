

Usare un'architettura MVP client-server.
PHP lato server, JS/HTML/CSS lato client, REST API, Docker.

La progettazione deve essere documentata e costituisce parte integrante della valutazione.

ðŸ”§ Obiettivi della progettazione
Definire lâ€™architettura software (struttura globale del sistema).
Progettare i componenti software e le loro responsabilitÃ .
Specificare le interfacce tra i componenti (es. endpoint REST).
Preparare i modelli di dati (DB relazionale).
Definire la gestione degli errori, sicurezza, logging.
Documentare tutto con diagrammi UML e testo descrittivo.


1. Scegli e documenta l'architettura del sistema:

Architettura MVP (Model-View-Presenter).
Comunicazione RESTful client-server.
Docker per lâ€™ambiente server (e opzionalmente per il client).

ðŸ“„ Cosa produrre:
Descrizione dellâ€™architettura generale.
Diagramma dei componenti (Component Diagram UML).


2. Progettazione delle classi
Basandoti sul Class Diagram iniziale:
Definisci le classi PHP (lato server) che gestiscono:
Utenti
AttivitÃ Formativa
Richieste
Hashtag
Stabilisci responsabilitÃ  e metodi (es. AttivitÃ Controller::creaAttivitÃ ()).

ðŸ“„ Cosa produrre:
Class Diagram dettagliato (con metodi e attributi).
Descrizione delle classi e delle responsabilitÃ .


3. Progettazione delle API REST

Per ogni azione del sistema definisci:
Endpoint (es. GET /api/attivita)
Metodo HTTP (GET, POST, PUT, DELETE)
Input/Output JSON
Codici di risposta

ðŸ“„ Cosa produrre:
Tabella delle API (documentazione endpoint).
Sequence Diagram UML per i casi piÃ¹ importanti (es. richiesta partecipazione).


4. Progettazione del Database

Trasforma le classi in tabelle relazionali.
Usa diagrammi ER o Schema Relazionale.
Definisci chiavi primarie, esterne, e vincoli.

ðŸ“„ Cosa produrre:
Diagramma EntitÃ -Relazione.
Script SQL iniziale di creazione schema.

5. Progettazione dellâ€™interfaccia utente (frontend)

Le pagine HTML previste.
I flussi utente (navigazione).
I moduli di input/output.
Le chiamate a REST API.

ðŸ“„ Cosa produrre:
Diagramma delle schermate.
Elenco delle interazioni utenteâ†’funzionalitÃ .

6. Dockerizzazione

Scrivi il Dockerfile per il backend PHP.
Scrivi un docker-compose.yml che avvii:
Server web (Apache/Nginx)
Container DB (es. MySQL)s

ðŸ“„ Cosa produrre:
File Dockerfile
File docker-compose.yml
Istruzioni dâ€™uso nel README


7. Documentazione della progettazione

La progettazione va documentata e messa sul repository GitHub. Include:
Diagrammi UML
Specifiche delle API
Schema del databases
Docker setup
Descrizione architettura

Output della fase di progettazione:
Architettura del sistema		Schema MVP e componenti
Class diagram				Con metodi e attributi
API REST				Tabella e documentazione
Database				ER Diagram + script SQL
Interfaccia utente			Wireframe + navigazione
Docker					Dockerfile + docker-compose.yml
Documentazione				File PDF o Markdown nel repository